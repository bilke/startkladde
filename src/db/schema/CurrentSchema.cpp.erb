<%#
	This file should be processed with erb -T 1 from the startkladde root 
	directory. Usually, this is done by make.
%>
<%
	require 'yaml'
	schema=YAML.load_file('src/db/migrations/current_schema.yaml')
	
	tables=schema['tables']
	numOperations=tables.size
%>

/*
 * This file has been autogenerated from CurrentSchema.cpp.erb, using the data
 * from src/db/schema/schema.yaml.
 */

#include <QList>

#include "src/db/schema/CurrentSchema.h"
#include "src/db/interface/ColumnSpec.h"

CurrentSchema::CurrentSchema (Interface &interface):
	Schema (interface)
{
}

CurrentSchema::~CurrentSchema ()
{
}

void CurrentSchema::up (OperationMonitorInterface monitor)
{
	QList <ColumnSpec> columns;
	
<% progress=-1 %>
<% schema['tables'].each do |table| %>
<% table_name=table['name'] %>

	monitor.progress (<%= progress+=1 %>, <%= numOperations %>, "<%= "Anlegen: #{table_name}" %>");

	columns.clear ();
	columns << idColumn ();
<% table['columns'].each do |column| %>
<%
	# TODO create all columns at once
	column_name=column['name'];
	column_type=column['type'];
	column_null=column['nullok'];
	if !["YES", "NO"].include? column_null;
		raise "Unknown value for column.null: #{column_null}";
	end;
	column_extra=""
	column_extra="NOT NULL" if column_null=="NO"
%>
	columns << ColumnSpec ("<%= column_name %>", "<%= column_type %>", "<%= column_extra %>");
<% end %>

	createTable ("<%= table['name'] %>", columns);

<% end %>

	monitor.progress (<%= numOperations %>, <%= numOperations %>, "Fertig");
}

void CurrentSchema::down (OperationMonitorInterface monitor)
{
	(void)monitor;
}

QList<quint64> CurrentSchema::getVersions ()
{
	QList<quint64> versions;

<% schema['versions'].each do |version| %>
	versions << <%= version %>ll;
<% end %>
	
	return versions;
}
