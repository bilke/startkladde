# Targets:
#   - (default): startkladde (release)
#   - run: 

# Note: the program (startkladde) is built by another Makefile which is
# generated by qmake. Any dependency of startkladde which is built by this
# Makefile has to be stated explicitly, even though it is also present in the
# generated Makefile.
# For example: startkladde depends on CurrentSchema.cpp which is autogenerated
# from current_schema.yaml by this Makefile.
# If current_schema.yaml is changed, CurrentSchema.cpp has to be rebuilt. This
# only happens if CurrentSchema.cpp is a prerequisite of startkladde in *this*
# Makefile.

##############
## Settings ##
##############

# Set to qmake-qt4 if the default qmake is qmake-qt3 on this system
QMAKE = qmake


#####################
## Generic targets ##
#####################

.PHONY: default
default: startkladde

.PHONY: all
all: startkladde plugins


#########################
## Generic build rules ##
#########################

# A Makefile ist created from the corresponding project files by invoking qmake
Makefile_%: %.pro
	$(QMAKE) $<

.PHONY: startkladde
startkladde: Makefile_startkladde startkladde_autogenerated
	$(MAKE) -f Makefile_startkladde


########################
## Individual targets ##
########################

### The generated Makefile
Makefile_startkladde: build/migrations.pro

build/migrations.pro: migrations.pro.erb src/db/migrations
	mkdir -p build
	erb $< >$@ || rm $@


### Generated prerequisites of startkladde

# See the comment at the beginning of this file
startkladde_autogenerated: build/migrations.h build/migrations_headers.h build/CurrentSchema.cpp version/version.h

build/migrations.h build/migrations_headers.h: build/%.h: src/db/migration/%.h.erb src/db/migrations/*.h src/db/migrations
	./script/build/generate_migration_headers.rb

build/CurrentSchema.cpp: src/db/schema/CurrentSchema.cpp.erb src/db/migrations/current_schema.yaml
	mkdir -p build
	erb -T 1 src/db/schema/CurrentSchema.cpp.erb >$@ || rm $@

version/version.h: version/version version/make_version
	cd version; ./make_version; cd ..



####################
## Subdirectories ##
####################

.PHONY: plugins
plugins:
	$(MAKE) -C $@


#############
## Cleanup ##
#############

.PHONY: clean
clean: Makefile_startkladde Makefile_tests
	$(MAKE) -f Makefile_startkladde distclean
	$(MAKE) -f Makefile_tests distclean
	$(MAKE) -C plugins clean
	rm -f Makefile_startkladde Makefile_tests
	rm -f version/version.h
	rm -rf build


##########
## Misc ##
##########

.PHONY: run
run: startkladde
	./startkladde -q --no-full-screen

# Use a temporary file in build/, so if the dumping fails, we don't overwrite
# the schema
.PHONY: update_current_schema
update_current_schema: startkladde
	mkdir -p build
	./startkladde db:ensure_empty || (echo "Error: database is not empty - use ./startkladde db:clear"; false)
	./startkladde db:migrate
	./startkladde db:dump build/current_schema.yaml
	mv build/current_schema.yaml src/db/migrations/current_schema.yaml
	echo "Schema definition updated successfully"

