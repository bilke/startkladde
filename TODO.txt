Siehe auch Trac (startkladde.sf.net) 

Release checks:
  - test all situations for database initialization
  - start maximzed
  - dialogs: tab order; first tabs active
  

== Critical (before release) ==


== Major (important) ==

Plugin interface:
* "Protocol" like for weather plugin for all plugins
* Better escaping
* Configuration for plugins, e. g. longitude for sunset time correction
* Synchronize plugin update with clock
* Graphical wind display

Plugins:
* Sunset times: independend of year
* Sunset: allow configuration of longitude
* Plugin description file, GUI editing of parameters  

Flugbuch (Vorschlag eines Fluglehrers):
* Ausgabe Anzahl Landungen (Interessant bei Platzrunden mit dem Motorflieger)
* Zusammenfassung von Fluglehrerstarts wie folgt: Alle Starts eines Tages mit
  einem Flugzeugkennzeichen ergeben eine Zeile. In der Zeile Begleiter steht
  eine durch Kommas getrennte Liste aller Begleiter des Tages. Startzeit ist
  die erste Startzeit des Tages auf dem Kennzeichen. Landezeit ist die letzte
  Landezeit des Tages auf dem Kennzeichen. Anzahl Langungen = Anzahl in der
  Zeile zusammengefassten Fl√ºge.

UI:
* keep landed flights visible for n minutes
* undo for depart/land
* Window with with long plugin labels
* The whole database connection should be managed by the manger and the status
  be signaled to the main window (open/close methods in manager, and signals
  like ok/timeout)
* signal unhandled exceptions to main window (QApplication::notify)
* show log while migrating
* warning message before aborting migration

Models:
* Plane: can only do self launch (and select automatically, even on repeat)
* Plane, person, launch method: inactive (not displayed in select)

Config:
* Use QSettings
* Config dialog
* Make Unix socket Name configurable
* Make compression configurable
* Make configurable if it starts in full screen
* Make read timeout and keepalive interval configurable
* Configurable autoconnect

Database:
* SQLite support
* Standardize enum handling: store the database value internally and have an
  "unknown" type (instead of "none"). Also allows preserving unknown values in
  the database
* allow backup and restore of database (even if not connected)
* offer backup before migration on connect
* find out whether the full string lenth (255 characters) is transfered, even
  if the string is shorter. If yes, make shorter.
* local disk caching
* show upstream/downstream bytes in monitor dialog
* preserve unknown values for enum types and launch methods

Other:
* Time zone safety
* Write time to hwclock after change (?)
* Port to Windows
* Number of flying flights: also consider towplanes
* Keepalive should be a feature of DefaultInterface, not ThreadSafeInterface (?)


== Minor ==

UI:
* Find flights (dates) by registration
* Flight editor: double click error list, jump to widget
* Show depart/land now/later when editing flight?
* When there is no self launch, towflights are red (that's correct). When a
  self launch is added, the flight table has to be refreshed before it
  gets green

Database:
* Add foreign key constraints
* Add indexes
* Database checks (compare schema with database)
* using SQLite database without cache: either inherit from common base class or
  use a DummyCache
* consider using a memory SQLite for cache (is that fast enough?)
* improve models SQL interface
* Add a ResultConsumer as alternative to passing a result (especially for
  CopiedResult)
* move specialized queries generation to model classes (e. g. flight prepared)
  (but need after-filter)
* Flight should be an entity
* Allow a table name prefix
* show current/latest version in "still not current" messages
* plane should be called aircraft
* the column name type is reserved in rails and should not be used (aircraft:
  model, launch method: category?, flight: flight_type?)
* currently, when canceling while waiting for a ping to return, the actual
* operation will not be canceled, so the user has to cancel it again. The
* problem is described in DefaultInterface.cpp under "On synchronization".
* "Should the database be initialized?" may be asked twice 

Editors:
* Use QDataWidgetMapper for edit dialogs?

Implementation:
* Nested types: move to separate file to reduce dependencies (see dependencies
  marked "Required for ...")


== Tests ==

* Flight: all combinations of mode, started, landed, towflight
* Flight: also test inactive times (e. g. landing time given but leaving or not
  landed)
