Siehe auch Trac (startkladde.sf.net) 

== Critical (before release) ==

* Default config: remove launch methods

Documentation:
 INSTALL:
 8. Client einrichten
   - Für Datumseinstellung:
     In /etc/sudoers eintragen:
       startkladde  ALL=NOPASSWD:/bin/date
       startkladde  ALL=NOPASSWD:/etc/init.d/hwclock.sh stop

Default-Config: plugins (metar, regenrader) eintragen; +record_towpilot


Database notes:
/*
 * Tests:
 *   - Test the migrations:
 *     - make sure the old version and current sk_web work with "initial"
 *     - make sure we can migrate from both an empty and the legacy database
 *   - Port open, but connection not accepted
 *   - make sure "", 0 and NULL are read correctly
 *   - Test all paths for database initialization
 *
 * Improvements:
 *   - Add a ResultConsumer as alternative to passing a result (especially for
 *     CopiedResult)
 *   - move specialized queries generation to model classes (e. g. flight prepared)
 *     (but need after-filter)
 *   - Flight should be an entity
 *   - Remove code multiplication in Models (SQL interface)
 *   - change flight mode (and towflight mode) column type
 *   - Add a Database::saveObject that creates or updates the object, depending
 *     on whether it has a valid id
 *   - Allow a table name prefix (useful for testing)
 *   - show current/latest version in "still not current" messages
 *   - for actions without progress indication (e. g. connect, or update
 *     object): show upstream/downstream bytes in monitor dialog
 *   - plane should be called aircraft
 *   - the column name type is reserved in rails and should not be used
 *     - aircraft: model
 *     - launch method: category?
 *     - flight: flight_type?
 *   - signal unhandled exceptions to main window (QApplication::notify)
 *   - currently, when canceling while waiting for a ping to return, the actual
 *     operation will not be canceled, so the user has to cancel it again. The
 *     problem is described in DefaultInterface.cpp under "On synchronization".
 *
 * Medium term plan:
 *   - Standardize enum handling: store the database value internally and have
 *     an "unknown" type (instead of "none")
 *     - this should also allow preserving unknown types in the database
 *   - allow backup and restore of database (even if not connected)
 *     - offer backup when migrating on connect
 *   - rename planes.competition_callsign to planes.callsign
 *   - add some abstraction to the query list generation
 *   - add support for sqlite
 *   - add indexes
 *   - add foreign key constraints
 *   - database checks (?)
 *     - show what is wrong/will be fixed
 *   - find out whether the full string lenth (255 characters) is transfered,
 *     even if the string is shorter. If yes, make shorter.
 *
 * Long term plan:
 *   - use a memory SQLite for cache
 *   - merge data storage and database methods, so we can use a (local)
 *     database directly (w/o local cache)
 *       - we'd probably have an abstract DataSource and inherited Database and
 *         Cache which uses a Database for access and one (in
 *         memory) for local caching
 *       - question: can we afford using a query on a memory database e. g.
 *         for list of first names rather than maintaining the list explicitly?
 *         should be fast enough (does sqlite memory table have index?)
 *         locations are more interesting, b/c there are many flights
 *   - local disk caching
 *
 * Old comments:
 *   - Time to string: to_string (db_time_format, tz_utc, 20, true);
 *   - String to time: parse (text, tz_utc, db_time_format);
 *   - Merge person:
 *     - update flight pilot/copilot/towpilot, user person; should be in transaction
 *     - check if a flight or user still referencecs this user
 *     - delete "wrong" person
 *   - old null time: "0000-00-00 00:00:00"
 *   - old db time format: "%Y-%m-%d %H:%M:%S" (must be parseable, don't use %0Y)
 */




== Major (important) ==

Plugin interface:
* "Protocol" like for weather plugin for all plugins
* Better escaping
* Configuration for plugins, e. g. longitude for sunset time correction
* Synchronize plugin update with clock
* Graphical wind display

Plugins:
* Sunset times: independend of year 

Flugbuch (Vorschlag eines Fluglehrers):
* Ausgabe Anzahl Landungen (Interessant bei Platzrunden mit dem Motorflieger)
* Zusammenfassung von Fluglehrerstarts wie folgt: Alle Starts eines Tages mit
  einem Flugzeugkennzeichen ergeben eine Zeile. In der Zeile Begleiter steht
  eine durch Kommas getrennte Liste aller Begleiter des Tages. Startzeit ist
  die erste Startzeit des Tages auf dem Kennzeichen. Landezeit ist die letzte
  Landezeit des Tages auf dem Kennzeichen. Anzahl Langungen = Anzahl in der
  Zeile zusammengefassten Flüge.

UI:
* keep landed flights visible for n minutes
* undo for depart/land
* Window with with long plugin labels
* The whole database connection should be managed by the manger and the status
  be signaled to the main window (open/close methods in manager, and signals
  like ok/timeout)

Models:
* Plane: can only do self launch (and select automatically, even on repeat)
* Plane, person, launch method: inactive (not displayed in select)

Config:
* Use YAML
* Config dialog
* Make Unix socket Name configurable machen
* Allow system wide config
* Make compression configurable
* Make read timeout and keepalive interval configurable
* Configurable autoconnect
* Rename title to window_title or remove 

Other:
* Time zone safety
* Write time to hwclock after change (?)
* Port to Windows
* Number of flying flights: also consider towplanes
* Keepalive should be a feature of DefaultInterface, not ThreadSafeInterface (?)


== Minor ==

UI:
* Find flights (dates) by registration
* Flight editor: double click error list, jump to widget
* Show depart/land now/later when editing flight?
* When there is no self launch, towflights are red (that's correct). When a
  self launch is added, the flight table has to be refreshed before it
  gets green

Database:
* Add indexes

Editors:
* Use QDataWidgetMapper for edit dialogs?

Implementation:
* Nested types: move to separate file to reduce dependencies (see dependencies
  marked "Required for ...")


== Tests ==

* Flight: all combinations of mode, started, landed, towflight
* Flight: also test inactive times (e. g. landing time given but leaving or not
  landed)
